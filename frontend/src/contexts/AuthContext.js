// frontend/src/contexts/AuthContext.js - Fixed Version
import React, { createContext, useState, useContext, useEffect } from 'react';
import authService from '../services/authService';
import profileService from '../services/profileService';
import LoadingSpinner from '../components/LoadingSpinner/LoadingSpinner';

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Context
const AuthContext = createContext();

// Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ AuthContext
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

// AuthProvider Component
export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ authentication ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏û‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  useEffect(() => {
    const initializeAuth = async () => {
      try {
        const currentUser = authService.getCurrentUser();
        const token = authService.getToken();

        if (currentUser && token) {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ token ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          try {
            const result = await authService.getMe();
            if (result.success) {
              setUser(result.data);
              
              // üéØ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å API
              try {
                const profileData = await profileService.getProfile();
                const updatedUser = {
                  ...result.data,
                  full_name: profileData.full_name,
                  email: profileData.email,
                  phone: profileData.phone,
                  profile_image: profileData.profile_image,
                  updated_at: profileData.updated_at
                };
                setUser(updatedUser);
                authService.setCurrentUser(updatedUser);
              } catch (profileError) {
                console.warn('Failed to fetch profile on initialization:', profileError);
                // ‡∏ñ‡πâ‡∏≤‡∏î‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å getMe
                setUser(result.data);
              }
            } else {
              // Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà valid - ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
              authService.removeToken();
              authService.removeCurrentUser();
              setUser(null);
            }
          } catch (error) {
            console.error('Token validation failed:', error);
            authService.removeToken();
            authService.removeCurrentUser();
            setUser(null);
          }
        } else {
          // ‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡∏´‡∏£‡∏∑‡∏≠ user data
          setUser(null);
        }
      } catch (error) {
        console.error('Auth initialization error:', error);
        authService.removeToken();
        authService.removeCurrentUser();
        setUser(null);
      } finally {
        setLoading(false);
      }
    };

    initializeAuth();
  }, []);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô login - ‡∏£‡∏±‡∏Å‡∏©‡∏≤ format ‡πÄ‡∏î‡∏¥‡∏°
  const login = async (credentials) => {
    try {
      const result = await authService.login(credentials);
      
      if (result.success) {
        setUser(result.data.user_info);
        
        // üéØ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏´‡∏•‡∏±‡∏á login
        try {
          const profileData = await profileService.getProfile();
          const updatedUser = {
            ...result.data.user_info,
            full_name: profileData.full_name,
            email: profileData.email,
            phone: profileData.phone,
            profile_image: profileData.profile_image,
            updated_at: profileData.updated_at
          };
          setUser(updatedUser);
          authService.setCurrentUser(updatedUser);
        } catch (profileError) {
          console.warn('Failed to fetch profile after login:', profileError);
          // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å login response
        }
        
        return {
          success: true,
          message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
          data: result.data
        };
      }
      
      // ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô error ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
      return {
        success: false,
        error: result.error || result.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö'
      };
      
    } catch (error) {
      console.error('Login error:', error);
      return {
        success: false,
        error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö'
      };
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô register - ‡∏£‡∏±‡∏Å‡∏©‡∏≤ format ‡πÄ‡∏î‡∏¥‡∏°
  const register = async (userData) => {
    try {
      const result = await authService.register(userData);
      
      if (result.success) {
        return {
          success: true,
          message: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
          data: result.data
        };
      }
      
      return {
        success: false,
        error: result.error || result.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å'
      };
      
    } catch (error) {
      console.error('Register error:', error);
      return {
        success: false,
        error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å'
      };
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô logout
  const logout = async () => {
    try {
      await authService.logout();
      setUser(null);
      return {
        success: true,
        message: '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'
      };
    } catch (error) {
      console.error('Logout error:', error);
      // ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏∂‡∏á‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏°‡∏µ error
      setUser(null);
      return {
        success: true,
        message: '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'
      };
    }
  };

  // üéØ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå)
  const updateUser = (userData) => {
    const updatedUser = {
      ...user,
      ...userData
    };
    setUser(updatedUser);
    authService.setCurrentUser(updatedUser);
  };

  // üéØ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const syncProfile = async () => {
    if (!isAuthenticated()) return;
    
    try {
      const profileData = await profileService.getProfile();
      const updatedUser = {
        ...user,
        full_name: profileData.full_name,
        email: profileData.email,
        phone: profileData.phone,
        profile_image: profileData.profile_image,
        updated_at: profileData.updated_at
      };
      setUser(updatedUser);
      authService.setCurrentUser(updatedUser);
      return updatedUser;
    } catch (error) {
      console.error('Failed to sync profile:', error);
      throw error;
    }
  };

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user login ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const isAuthenticated = () => {
    return user !== null && authService.getToken() !== null;
  };

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  const hasRole = (role) => {
    if (!user) return false;
    return user.user_type === role || (user.roles && user.roles.includes(role));
  };

  // üéØ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
  const getInitials = (fullName) => {
    if (!fullName) return 'U';
    
    const names = fullName.split(' ');
    if (names.length >= 2) {
      return (names[0][0] + names[1][0]).toUpperCase();
    }
    return names[0][0].toUpperCase();
  };

  const getDisplayName = (fullName) => {
    if (!fullName) return 'User';
    
    const names = fullName.split(' ');
    if (names.length >= 2) {
      return names[0]; // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠
    }
    return fullName;
  };

  const getProfileImageUrl = () => {
    const imageUrl = user?.profile_image;
    
    if (imageUrl) {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô URL ‡πÄ‡∏ï‡πá‡∏° ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏¢
      if (imageUrl.startsWith('http')) {
        return imageUrl;
      }
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô path ‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå ‡πÄ‡∏û‡∏¥‡πà‡∏° base URL
      return `http://localhost:8000${imageUrl}`;
    }
    
    return null;
  };

  // Context value
  const value = {
    // Core auth data
    user,
    loading,
    
    // Auth methods - ‡∏£‡∏±‡∏Å‡∏©‡∏≤ format ‡πÄ‡∏î‡∏¥‡∏°
    isAuthenticated,
    hasRole,
    login,
    register,
    logout,
    
    // Profile methods
    updateUser,
    syncProfile,
    
    // Helper methods
    getInitials,
    getDisplayName,
    getProfileImageUrl,
    
    // Computed properties
    hasProfileImage: !!getProfileImageUrl(),
    fullName: user?.full_name || '',
    email: user?.email || '',
    userType: user?.user_type || ''
  };

  return (
    <AuthContext.Provider value={value}>
      {loading ? (
        <div className="auth-loading">
          <LoadingSpinner size="large" message="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö..." />
        </div>
      ) : (
        children
      )}
    </AuthContext.Provider>
  );
};

export default AuthContext;