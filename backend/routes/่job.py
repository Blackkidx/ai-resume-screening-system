# =============================================================================
# üìã AI RESUME SCREENING FOR THAI STUDENT INTERNSHIPS - routes/job.py
# ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏£‡∏ã‡∏π‡πÄ‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
# =============================================================================

from fastapi import APIRouter, Depends, HTTPException, Query, UploadFile, File, Form
from fastapi.security import HTTPBearer
from typing import List, Optional, Dict, Any, Union
from pydantic import BaseModel, Field, validator
from datetime import datetime, timedelta, date
from bson import ObjectId
from enum import Enum
import json

# Import core dependencies
from core.database import get_database
from core.auth import get_current_user, require_role
from core.utils import generate_unique_id, validate_file_type

router = APIRouter(tags=["Internship Jobs"], prefix="/jobs")
security = HTTPBearer()

# =============================================================================
# üìã THAI INTERNSHIP SPECIFIC ENUMS
# =============================================================================

class InternshipType(str, Enum):
    COOPERATIVE_EDUCATION = "Cooperative Education (‡∏™‡∏´‡∏Å‡∏¥‡∏à‡∏®‡∏∂‡∏Å‡∏©‡∏≤)"  # 4-6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô
    INTERNSHIP = "Internship (‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô)"  # 2-4 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ
    FIELD_STUDY = "Field Study (‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô/‡∏†‡∏≤‡∏Ñ‡∏™‡∏ô‡∏≤‡∏°)"  # 1-2 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô
    PART_TIME_STUDENT = "Part-time Student Work (‡∏á‡∏≤‡∏ô‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤)"  # ‡∏ó‡∏≥‡πÑ‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏õ

class WorkMode(str, Enum):
    ONSITE = "Onsite (‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó)"
    HYBRID = "Hybrid (‡∏ú‡∏™‡∏°‡∏ú‡∏™‡∏≤‡∏ô)"
    REMOTE = "Remote (‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô)"  # ‡∏ô‡πâ‡∏≠‡∏¢‡∏°‡∏≤‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô

class CompensationType(str, Enum):
    NO_COMPENSATION = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô"
    DAILY_ALLOWANCE = "‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô"  # 200-500 ‡∏ö‡∏≤‡∏ó/‡∏ß‡∏±‡∏ô
    MONTHLY_ALLOWANCE = "‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"  # 3000-15000 ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    HOURLY_WAGE = "‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á"  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö part-time
    PROJECT_BASED = "‡∏à‡πà‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ"

class StudentLevel(str, Enum):
    VOCATIONAL_1 = "‡∏õ‡∏ß‡∏ä. ‡∏õ‡∏µ 1"
    VOCATIONAL_2 = "‡∏õ‡∏ß‡∏ä. ‡∏õ‡∏µ 2"
    VOCATIONAL_3 = "‡∏õ‡∏ß‡∏ä. ‡∏õ‡∏µ 3"
    DIPLOMA_1 = "‡∏õ‡∏ß‡∏™. ‡∏õ‡∏µ 1"
    DIPLOMA_2 = "‡∏õ‡∏ß‡∏™. ‡∏õ‡∏µ 2"
    BACHELOR_1 = "‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡∏ï‡∏£‡∏µ ‡∏õ‡∏µ 1"
    BACHELOR_2 = "‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡∏ï‡∏£‡∏µ ‡∏õ‡∏µ 2"
    BACHELOR_3 = "‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡∏ï‡∏£‡∏µ ‡∏õ‡∏µ 3"
    BACHELOR_4 = "‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡∏ï‡∏£‡∏µ ‡∏õ‡∏µ 4"
    MASTER = "‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÇ‡∏ó"

class Department(str, Enum):
    # IT & Technology
    IT_SOFTWARE = "IT - Software Development"
    IT_DATA = "IT - Data Analysis"
    IT_NETWORK = "IT - Network & Infrastructure"
    IT_CYBERSECURITY = "IT - Cybersecurity"
    IT_SUPPORT = "IT - Technical Support"
    
    # Business & Management
    MARKETING = "‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î"
    SALES = "‡∏ù‡πà‡∏≤‡∏¢‡∏Ç‡∏≤‡∏¢"
    HR = "‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•"
    FINANCE = "‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô"
    ACCOUNTING = "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"
    
    # Creative & Design
    GRAPHIC_DESIGN = "‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡∏¥‡∏Å"
    UI_UX = "UI/UX Design"
    CONTENT_CREATION = "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡∏ï‡πå"
    SOCIAL_MEDIA = "Social Media"
    
    # Operations
    OPERATIONS = "‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£"
    LOGISTICS = "‡πÇ‡∏•‡∏à‡∏¥‡∏™‡∏ï‡∏¥‡∏Å‡∏™‡πå"
    PROCUREMENT = "‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠"
    QUALITY_CONTROL = "‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û"
    
    # Others
    RESEARCH = "‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤"
    LEGAL = "‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢"
    PUBLIC_RELATIONS = "‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå"
    OTHER = "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"

class ApplicationStatus(str, Enum):
    SUBMITTED = "‡∏™‡πà‡∏á‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏•‡πâ‡∏ß"
    UNDER_REVIEW = "‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤"
    SHORTLISTED = "‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô"
    INTERVIEW_SCHEDULED = "‡∏ô‡∏±‡∏î‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß"
    INTERVIEW_COMPLETED = "‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"
    ACCEPTED = "‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô"
    REJECTED = "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"
    WITHDRAWN = "‡∏ñ‡∏≠‡∏ô‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£"
    COMPLETED = "‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"

# =============================================================================
# üìã THAI INTERNSHIP MODELS
# =============================================================================

class Welfare(BaseModel):
    name: str = Field(..., description="‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£")
    description: Optional[str] = Field(None, description="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")
    
class SkillRequirement(BaseModel):
    name: str = Field(..., min_length=1, max_length=50)
    is_required: bool = True
    level: Optional[str] = Field(None, description="‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)")
    weight: float = Field(default=1.0, ge=0.1, le=5.0)

class InternshipCreate(BaseModel):
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    title: str = Field(..., min_length=5, max_length=100, description="‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô")
    description: str = Field(..., min_length=50, max_length=3000, description="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô")
    short_description: Optional[str] = Field(None, max_length=200, description="‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏±‡πâ‡∏ô")
    
    # ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô
    internship_type: InternshipType
    department: Department
    work_mode: WorkMode
    
    # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    location: str = Field(..., min_length=2, max_length=100, description="‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    address: Optional[str] = Field(None, max_length=300, description="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏ï‡πá‡∏°")
    nearby_stations: Optional[List[str]] = Field(None, description="‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏£‡∏ñ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤/‡∏Ç‡∏ô‡∏™‡πà‡∏á‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á")
    
    # ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
    duration_months: int = Field(..., ge=1, le=12, description="‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)")
    start_date: Optional[date] = Field(None, description="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô")
    end_date: Optional[date] = Field(None, description="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î")
    working_days: List[str] = Field(default=["‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏®‡∏∏‡∏Å‡∏£‡πå"], description="‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    working_hours: str = Field(default="09:00-17:00", description="‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    flexible_hours: bool = Field(default=False, description="‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô")
    
    # ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
    student_levels: List[StudentLevel] = Field(..., description="‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö")
    majors: List[str] = Field(default_factory=list, description="‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á")
    min_gpa: Optional[float] = Field(None, ge=0.0, le=4.0, description="‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥")
    
    # ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    requirements: List[str] = Field(default_factory=list, max_items=15, description="‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
    skills_required: List[SkillRequirement] = Field(default_factory=list, max_items=20)
    preferred_skills: List[str] = Field(default_factory=list, description="‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö")
    
    # ‡∏Ñ‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£
    compensation_type: CompensationType
    compensation_amount: Optional[int] = Field(None, ge=0, le=50000, description="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)")
    compensation_description: Optional[str] = Field(None, description="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô")
    
    # ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£
    welfare_lunch: bool = Field(default=False, description="‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô")
    welfare_transport: bool = Field(default=False, description="‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á")
    welfare_accommodation: bool = Field(default=False, description="‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å")
    welfare_medical: bool = Field(default=False, description="‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û")
    welfare_training: bool = Field(default=True, description="‡∏≠‡∏ö‡∏£‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞")
    welfare_others: List[Welfare] = Field(default_factory=list, description="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ")
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£
    positions_available: int = Field(default=1, ge=1, le=20, description="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö")
    application_deadline: Optional[datetime] = Field(None, description="‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£")
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
    contact_person: Optional[str] = Field(None, description="‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠")
    contact_email: Optional[str] = Field(None, description="‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠")
    contact_phone: Optional[str] = Field(None, description="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠")
    contact_line: Optional[str] = Field(None, description="Line ID")
    
    # ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á
    provides_certificate: bool = Field(default=True, description="‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô")
    evaluation_system: Optional[str] = Field(None, description="‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
    mentor_assigned: bool = Field(default=True, description="‡∏°‡∏µ‡∏û‡∏µ‡πà‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏î‡∏π‡πÅ‡∏•")
    
    # AI Settings
    auto_screening: bool = Field(default=False, description="‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢ AI")
    min_matching_score: float = Field(default=0.6, ge=0.0, le=1.0)
    
    # Tags ‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    tags: List[str] = Field(default_factory=list, max_items=8)
    is_urgent: bool = Field(default=False, description="‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏î‡πà‡∏ß‡∏ô")
    is_featured: bool = Field(default=False, description="‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ó‡∏û‡∏¥‡πÄ‡∏®‡∏©")

class InternshipResponse(BaseModel):
    id: str
    job_code: str  # ‡πÄ‡∏ä‡πà‡∏ô INT-2025-001
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    title: str
    description: str
    short_description: Optional[str]
    
    # ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
    company_id: str
    company_name: str
    company_logo_url: Optional[str]
    company_size: Optional[str]
    company_industry: Optional[str]
    
    # ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å
    internship_type: InternshipType
    department: Department
    work_mode: WorkMode
    
    # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
    location: str
    address: Optional[str]
    nearby_stations: Optional[List[str]]
    duration_months: int
    start_date: Optional[date]
    end_date: Optional[date]
    working_days: List[str]
    working_hours: str
    flexible_hours: bool
    
    # ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥
    student_levels: List[StudentLevel]
    majors: List[str]
    min_gpa: Optional[float]
    requirements: List[str]
    skills_required: List[SkillRequirement]
    preferred_skills: List[str]
    
    # ‡∏Ñ‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô
    compensation_type: CompensationType
    compensation_amount: Optional[int]
    compensation_description: Optional[str]
    
    # ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£
    welfare_lunch: bool
    welfare_transport: bool
    welfare_accommodation: bool
    welfare_medical: bool
    welfare_training: bool
    welfare_others: List[Welfare]
    
    # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    positions_available: int
    positions_filled: int
    applications_count: int
    qualified_applications: int
    views_count: int
    saves_count: int
    
    # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    application_deadline: Optional[datetime]
    created_at: datetime
    updated_at: datetime
    created_by: str
    
    # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    is_active: bool
    is_urgent: bool
    is_featured: bool
    
    # AI Features
    auto_screening: bool
    min_matching_score: float
    ai_match_score: Optional[float] = None
    recommendation_reason: Optional[str] = None
    
    # Analytics
    avg_gpa_applicants: Optional[float]
    popular_majors: Optional[List[str]]
    avg_response_time_days: Optional[float]

class StudentApplicationCreate(BaseModel):
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    student_id: Optional[str] = Field(None, description="‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤")
    university: str = Field(..., description="‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤")
    faculty: str = Field(..., description="‡∏Ñ‡∏ì‡∏∞")
    major: str = Field(..., description="‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤")
    year_of_study: StudentLevel
    current_gpa: Optional[float] = Field(None, ge=0.0, le=4.0)
    
    # ‡∏à‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏•‡∏∞‡πÅ‡∏£‡∏á‡∏à‡∏π‡∏á‡πÉ‡∏à
    cover_letter: Optional[str] = Field(None, max_length=1500, description="‡∏à‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô")
    motivation: Optional[str] = Field(None, max_length=1000, description="‡πÅ‡∏£‡∏á‡∏à‡∏π‡∏á‡πÉ‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£")
    career_goals: Optional[str] = Field(None, max_length=800, description="‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏û")
    
    # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå
    relevant_experience: Optional[str] = Field(None, max_length=1000, description="‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á")
    projects: Optional[List[str]] = Field(None, description="‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥")
    certifications: Optional[List[str]] = Field(None, description="‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á/Certificate")
    languages: Optional[List[str]] = Field(None, description="‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ")
    
    # Portfolio ‡πÅ‡∏•‡∏∞‡∏•‡∏¥‡∏á‡∏Å‡πå
    portfolio_url: Optional[str] = Field(None, description="Portfolio/‡∏ú‡∏•‡∏á‡∏≤‡∏ô")
    github_url: Optional[str] = Field(None, description="GitHub")
    linkedin_url: Optional[str] = Field(None, description="LinkedIn")
    
    # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î
    available_start_date: Optional[date] = Field(None, description="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
    transportation: Optional[str] = Field(None, description="‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á")
    has_laptop: bool = Field(default=False, description="‡∏°‡∏µ‡πÅ‡∏•‡πá‡∏õ‡∏ó‡πá‡∏≠‡∏õ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß")
    can_work_overtime: bool = Field(default=True, description="‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏î‡πâ")
    
    # ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö
    transcript_url: Optional[str] = Field(None, description="‡πÉ‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô")
    recommendation_letter_url: Optional[str] = Field(None, description="‡∏à‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á")
    additional_documents: List[str] = Field(default_factory=list, description="‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")

class ApplicationResponse(BaseModel):
    id: str
    application_code: str
    
    # Job Info
    job_id: str
    job_title: str
    company_name: str
    
    # Student Info
    student_id: str
    student_name: str
    student_email: str
    student_phone: Optional[str]
    university: str
    faculty: str
    major: str
    year_of_study: StudentLevel
    current_gpa: Optional[float]
    
    # Application Content
    cover_letter: Optional[str]
    motivation: Optional[str]
    career_goals: Optional[str]
    relevant_experience: Optional[str]
    
    # Documents
    resume_url: Optional[str]
    transcript_url: Optional[str]
    portfolio_url: Optional[str]
    additional_documents: List[str]
    
    # Status & Review
    status: ApplicationStatus
    ai_matching_score: Optional[float]
    ai_feedback: Optional[str]
    hr_rating: Optional[int]
    hr_comments: Optional[str]
    interview_notes: Optional[str]
    
    # Timeline
    submitted_at: datetime
    last_updated: datetime
    interview_date: Optional[datetime]
    decision_date: Optional[datetime]
    
    # Performance Metrics
    profile_completeness: float
    response_speed_score: float
    gpa_percentile: Optional[float]

# =============================================================================
# üß™ API HEALTH CHECK
# =============================================================================

@router.get("/test")
async def test_internship_api():
    """üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤"""
    return {
        "message": "‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏£‡∏ã‡∏π‡πÄ‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏ó‡∏¢",
        "status": "OK",
        "version": "1.0.0",
        "context": "Thai Student Internship",
        "features": {
            "internship_types": [t.value for t in InternshipType],
            "student_levels": [s.value for s in StudentLevel],
            "departments": [d.value for d in Department],
            "compensation_types": [c.value for c in CompensationType],
            "unique_features": [
                "‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô",
                "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á", 
                "‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ï‡∏≤‡∏° GPA ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤",
                "‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô",
                "‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏µ‡πà‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"
            ]
        },
        "target_users": {
            "students": "‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏∏‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö ‡∏õ‡∏ß‡∏ä.-‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÇ‡∏ó",
            "companies": "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô",
            "universities": "‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"
        }
    }

# =============================================================================
# üîç INTERNSHIP SEARCH FOR STUDENTS
# =============================================================================

@router.get("", response_model=List[InternshipResponse])
async def search_internships(
    # Pagination
    skip: int = Query(0, ge=0, description="‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ç‡πâ‡∏≤‡∏°"),
    limit: int = Query(20, ge=1, le=50, description="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤"),
    
    # Text Search
    search: Optional[str] = Query(None, description="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó"),
    
    # Student-specific filters
    my_major: Optional[str] = Query(None, description="‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô"),
    my_level: Optional[StudentLevel] = Query(None, description="‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô"),
    my_gpa: Optional[float] = Query(None, ge=0.0, le=4.0, description="‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô"),
    
    # Job type filters
    internship_type: Optional[InternshipType] = Query(None, description="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô"),
    department: Optional[Department] = Query(None, description="‡πÅ‡∏ú‡∏ô‡∏Å‡∏á‡∏≤‡∏ô"),
    work_mode: Optional[WorkMode] = Query(None, description="‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"),
    
    # Location & Transport
    location: Optional[str] = Query(None, description="‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"),
    near_bts_mrt: Optional[bool] = Query(None, description="‡πÉ‡∏Å‡∏•‡πâ BTS/MRT"),
    
    # Duration
    max_duration: Optional[int] = Query(None, ge=1, le=12, description="‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)"),
    min_duration: Optional[int] = Query(None, ge=1, le=12, description="‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)"),
    
    # Compensation & Welfare
    compensation_type: Optional[CompensationType] = Query(None, description="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô"),
    min_allowance: Optional[int] = Query(None, ge=0, description="‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥"),
    has_lunch: Optional[bool] = Query(None, description="‡∏°‡∏µ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô"),
    has_transport: Optional[bool] = Query(None, description="‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á"),
    
    # Special requirements
    flexible_hours: Optional[bool] = Query(None, description="‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô"),
    provides_certificate: Optional[bool] = Query(None, description="‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á"),
    has_mentor: Optional[bool] = Query(None, description="‡∏°‡∏µ‡∏û‡∏µ‡πà‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á"),
    
    # Timing
    start_within_days: Optional[int] = Query(None, description="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏µ‡πà‡∏ß‡∏±‡∏ô"),
    deadline_within_days: Optional[int] = Query(None, description="‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏µ‡πà‡∏ß‡∏±‡∏ô"),
    
    # Special flags
    urgent_only: Optional[bool] = Query(None, description="‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏á‡∏≤‡∏ô‡∏î‡πà‡∏ß‡∏ô"),
    featured_only: Optional[bool] = Query(None, description="‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏á‡∏≤‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
    
    # Sorting
    sort_by: str = Query("created_at", description="‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°: created_at, deadline, allowance, duration, match_score"),
    sort_order: str = Query("desc", regex="^(asc|desc)$"),
    
    # AI Personalization
    personalized: bool = Query(False, description="‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏° Profile"),
    
    # Dependencies
    db=Depends(get_database),
    current_user: Optional[dict] = Depends(get_current_user)
):
    """
    üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
    
    ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    """
    
    try:
        # Base filter
        filter_query = {"is_active": True}
        
        # Text search
        if search:
            filter_query["$or"] = [
                {"title": {"$regex": search, "$options": "i"}},
                {"company_name": {"$regex": search, "$options": "i"}},
                {"description": {"$regex": search, "$options": "i"}},
                {"tags": {"$in": [{"$regex": search, "$options": "i"}]}}
            ]
        
        # Student level matching
        if my_level:
            filter_query["student_levels"] = my_level.value
        
        # Major matching
        if my_major:
            filter_query["majors"] = {"$in": [my_major, "‡∏ó‡∏∏‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤", "All Majors"]}
        
        # GPA requirement
        if my_gpa:
            filter_query["$or"] = [
                {"min_gpa": {"$lte": my_gpa}},
                {"min_gpa": None}
            ]
        
        # Job type filters
        if internship_type:
            filter_query["internship_type"] = internship_type.value
        
        if department:
            filter_query["department"] = department.value
        
        if work_mode:
            filter_query["work_mode"] = work_mode.value
        
        # Location filters
        if location:
            filter_query["location"] = {"$regex": location, "$options": "i"}
        
        if near_bts_mrt:
            filter_query["nearby_stations"] = {"$exists": True, "$ne": []}
        
        # Duration filters
        if max_duration:
            filter_query["duration_months"] = {"$lte": max_duration}
        
        if min_duration:
            filter_query.setdefault("duration_months", {})["$gte"] = min_duration
        
        # Compensation filters
        if compensation_type:
            filter_query["compensation_type"] = compensation_type.value
        
        if min_allowance:
            filter_query["compensation_amount"] = {"$gte": min_allowance}
        
        # Welfare filters
        if has_lunch is not None:
            filter_query["welfare_lunch"] = has_lunch
        
        if has_transport is not None:
            filter_query["welfare_transport"] = has_transport
        
        # Special requirement filters
        if flexible_hours is not None:
            filter_query["flexible_hours"] = flexible_hours
        
        if provides_certificate is not None:
            filter_query["provides_certificate"] = provides_certificate
        
        if has_mentor is not None:
            filter_query["mentor_assigned"] = has_mentor
        
        # Timing filters
        now = datetime.utcnow()
        
        if start_within_days:
            start_date_limit = now + timedelta(days=start_within_days)
            filter_query["start_date"] = {"$lte": start_date_limit}
        
        if deadline_within_days:
            deadline_limit = now + timedelta(days=deadline_within_days)
            filter_query["application_deadline"] = {
                "$gte": now,
                "$lte": deadline_limit
            }
        
        # Special flags
        if urgent_only:
            filter_query["is_urgent"] = True
        
        if featured_only:
            filter_query["is_featured"] = True
        
        # Exclude expired deadlines
        filter_query["$or"] = [
            {"application_deadline": {"$gt": now}},
            {"application_deadline": None}
        ]
        
        # Execute query with sorting
        sort_direction = 1 if sort_order == "asc" else -1
        cursor = db.internships.find(filter_query).sort(sort_by, sort_direction).skip(skip).limit(limit)
        jobs = await cursor.to_list(length=limit)
        
        # Transform and add AI scores if personalized
        result_jobs = []
        for job in jobs:
            job_data = transform_internship_data(job)
            
            # Add AI matching if user is logged in and requested
            if personalized and current_user:
                job_data["ai_match_score"] = await calculate_student_match_score(job, current_user, db)
                job_data["recommendation_reason"] = await get_recommendation_reason(job, current_user, db)
            
            result_jobs.append(job_data)
        
        # Sort by AI score if personalized
        if personalized and current_user:
            result_jobs.sort(key=lambda x: x.get("ai_match_score", 0), reverse=True)
        
        return result_jobs
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error searching internships: {str(e)}")

# =============================================================================
# üìã INTERNSHIP DETAILS & MANAGEMENT
# =============================================================================

@router.get("/{job_id}", response_model=InternshipResponse)
async def get_internship_details(
    job_id: str,
    current_user: Optional[dict] = Depends(get_current_user),
    db=Depends(get_database)
):
    """üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô"""
    
    try:
        if not ObjectId.is_valid(job_id):
            raise HTTPException(status_code=400, detail="Invalid job ID format")
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô
        job = await db.internships.find_one({"_id": ObjectId(job_id)})
        if not job:
            raise HTTPException(status_code=404, detail="Internship not found")
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° view count (‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
        if current_user:
            today = datetime.utcnow().date()
            view_key = f"view_{job_id}_{current_user['id']}_{today}"
            
            existing_view = await db.job_views.find_one({"key": view_key})
            if not existing_view:
                await db.job_views.insert_one({
                    "key": view_key,
                    "job_id": job_id,
                    "user_id": current_user["id"],
                    "viewed_at": datetime.utcnow()
                })
                
                await db.internships.update_one(
                    {"_id": ObjectId(job_id)},
                    {"$inc": {"views_count": 1}}
                )
        
        # Transform data
        job_data = transform_internship_data(job)
        
        # Add personalized AI analysis
        if current_user and current_user.get("role") == "student":
            job_data["ai_match_score"] = await calculate_student_match_score(job, current_user, db)
            job_data["recommendation_reason"] = await get_recommendation_reason(job, current_user, db)
        
        return job_data
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching internship: {str(e)}")

@router.post("", response_model=InternshipResponse)
async def create_internship(
    internship: InternshipCreate,
    current_user=Depends(require_role(["hr", "admin"])),
    db=Depends(get_database)
):
    """‚ûï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HR)"""
    
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HR company
        company = await db.companies.find_one({"hr_users": current_user["id"]})
        if not company and current_user["role"] != "admin":
            raise HTTPException(status_code=400, detail="HR must be assigned to a company")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        if internship.start_date and internship.end_date:
            if internship.end_date <= internship.start_date:
                raise HTTPException(status_code=400, detail="End date must be after start date")
        
        if internship.application_deadline and internship.application_deadline <= datetime.utcnow():
            raise HTTPException(status_code=400, detail="Application deadline must be in the future")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
        job_document = {
            **internship.dict(),
            "company_id": str(company["_id"]) if company else "system",
            "company_name": company["name"] if company else "System",
            "company_logo_url": company.get("logo_url") if company else None,
            "company_size": company.get("size") if company else None,
            "company_industry": company.get("industry") if company else None,
            "job_code": generate_unique_id("INT"),
            "created_by": current_user["id"],
            "created_at": datetime.utcnow(),
            "updated_at": datetime.utcnow(),
            "is_active": True,
            "positions_filled": 0,
            "applications_count": 0,
            "qualified_applications": 0,
            "views_count": 0,
            "saves_count": 0
        }
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        result = await db.internships.insert_one(job_document)
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
        created_job = await db.internships.find_one({"_id": result.inserted_id})
        
        return transform_internship_data(created_job)
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error creating internship: {str(e)}")

@router.put("/{job_id}", response_model=InternshipResponse)
async def update_internship(
    job_id: str,
    updates: Dict[str, Any],
    current_user=Depends(require_role(["hr", "admin"])),
    db=Depends(get_database)
):
    """‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô"""
    
    try:
        if not ObjectId.is_valid(job_id):
            raise HTTPException(status_code=400, detail="Invalid job ID format")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
        job = await db.internships.find_one({"_id": ObjectId(job_id)})
        if not job:
            raise HTTPException(status_code=404, detail="Internship not found")
        
        if current_user["role"] != "admin":
            company = await db.companies.find_one({"hr_users": current_user["id"]})
            if not company or str(company["_id"]) != job["company_id"]:
                raise HTTPException(status_code=403, detail="Access denied")
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï
        updates["updated_at"] = datetime.utcnow()
        
        await db.internships.update_one(
            {"_id": ObjectId(job_id)},
            {"$set": updates}
        )
        
        updated_job = await db.internships.find_one({"_id": ObjectId(job_id)})
        return transform_internship_data(updated_job)
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error updating internship: {str(e)}")

# =============================================================================
# üìù APPLICATION MANAGEMENT
# =============================================================================

@router.post("/{job_id}/apply", response_model=ApplicationResponse)
async def apply_for_internship(
    job_id: str,
    application: StudentApplicationCreate,
    current_user=Depends(require_role(["student"])),
    db=Depends(get_database)
):
    """üìù ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤)"""
    
    try:
        if not ObjectId.is_valid(job_id):
            raise HTTPException(status_code=400, detail="Invalid job ID format")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô
        job = await db.internships.find_one({"_id": ObjectId(job_id), "is_active": True})
        if not job:
            raise HTTPException(status_code=404, detail="Internship not found or inactive")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö deadline
        if job.get("application_deadline") and job["application_deadline"] <= datetime.utcnow():
            raise HTTPException(status_code=400, detail="Application deadline has passed")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        existing_app = await db.applications.find_one({
            "job_id": job_id,
            "student_id": current_user["id"]
        })
        if existing_app:
            raise HTTPException(status_code=400, detail="You have already applied for this internship")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        if not check_student_eligibility(job, application, current_user):
            raise HTTPException(status_code=400, detail="You don't meet the basic requirements for this internship")
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• resume ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        resume = await db.resumes.find_one(
            {"user_id": current_user["id"]},
            sort=[("created_at", -1)]
        )
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì AI matching score
        ai_score = await calculate_student_match_score(job, current_user, db) if resume else 0.5
        ai_feedback = await generate_ai_feedback(job, application, current_user, db)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á application document
        app_document = {
            **application.dict(),
            "job_id": job_id,
            "job_title": job["title"],
            "company_name": job["company_name"],
            "student_id": current_user["id"],
            "student_name": current_user.get("full_name", current_user["username"]),
            "student_email": current_user["email"],
            "student_phone": current_user.get("phone"),
            "resume_url": resume.get("file_url") if resume else None,
            "application_code": generate_unique_id("APP"),
            "status": ApplicationStatus.SUBMITTED.value,
            "ai_matching_score": ai_score,
            "ai_feedback": ai_feedback,
            "profile_completeness": calculate_profile_completeness(application),
            "submitted_at": datetime.utcnow(),
            "last_updated": datetime.utcnow(),
            "response_speed_score": 1.0  # Full score for immediate application
        }
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å application
        result = await db.applications.insert_one(app_document)
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏á‡∏≤‡∏ô
        update_stats = {"$inc": {"applications_count": 1}}
        if ai_score >= job.get("min_matching_score", 0.6):
            update_stats["$inc"]["qualified_applications"] = 1
        
        await db.internships.update_one(
            {"_id": ObjectId(job_id)},
            update_stats
        )
        
        # ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á HR (Background task)
        # await notify_hr_new_application(job, app_document)
        
        created_app = await db.applications.find_one({"_id": result.inserted_id})
        return transform_application_data(created_app)
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error applying for internship: {str(e)}")

@router.get("/{job_id}/applications", response_model=List[ApplicationResponse])
async def get_internship_applications(
    job_id: str,
    status: Optional[ApplicationStatus] = Query(None, description="‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"),
    min_gpa: Optional[float] = Query(None, ge=0.0, le=4.0, description="‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥"),
    min_ai_score: Optional[float] = Query(None, ge=0.0, le=1.0, description="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô AI ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥"),
    major: Optional[str] = Query(None, description="‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤"),
    university: Optional[str] = Query(None, description="‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢"),
    sort_by: str = Query("submitted_at", description="‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°"),
    sort_order: str = Query("desc", regex="^(asc|desc)$"),
    skip: int = Query(0, ge=0),
    limit: int = Query(50, ge=1, le=100),
    current_user=Depends(require_role(["hr", "admin"])),
    db=Depends(get_database)
):
    """üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HR)"""
    
    try:
        if not ObjectId.is_valid(job_id):
            raise HTTPException(status_code=400, detail="Invalid job ID format")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
        job = await db.internships.find_one({"_id": ObjectId(job_id)})
        if not job:
            raise HTTPException(status_code=404, detail="Internship not found")
        
        if current_user["role"] != "admin":
            company = await db.companies.find_one({"hr_users": current_user["id"]})
            if not company or str(company["_id"]) != job["company_id"]:
                raise HTTPException(status_code=403, detail="Access denied")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á filter
        filter_query = {"job_id": job_id}
        
        if status:
            filter_query["status"] = status.value
        
        if min_gpa is not None:
            filter_query["current_gpa"] = {"$gte": min_gpa}
        
        if min_ai_score is not None:
            filter_query["ai_matching_score"] = {"$gte": min_ai_score}
        
        if major:
            filter_query["major"] = {"$regex": major, "$options": "i"}
        
        if university:
            filter_query["university"] = {"$regex": university, "$options": "i"}
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        sort_direction = 1 if sort_order == "asc" else -1
        cursor = db.applications.find(filter_query).sort(sort_by, sort_direction).skip(skip).limit(limit)
        applications = await cursor.to_list(length=limit)
        
        return [transform_application_data(app) for app in applications]
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching applications: {str(e)}")

# =============================================================================
# üéØ AI-POWERED RECOMMENDATIONS
# =============================================================================

@router.get("/recommendations/for-me", response_model=List[InternshipResponse])
async def get_personalized_recommendations(
    limit: int = Query(10, ge=1, le=20, description="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
    min_score: float = Query(0.6, ge=0.0, le=1.0, description="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥"),
    include_reason: bool = Query(True, description="‡∏£‡∏ß‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"),
    current_user=Depends(require_role(["student"])),
    db=Depends(get_database)
):
    """üéØ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"""
    
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Profile ‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
        student_profile = await db.student_profiles.find_one({"user_id": current_user["id"]})
        if not student_profile:
            raise HTTPException(status_code=400, detail="Please complete your student profile first")
        
        # ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£
        active_jobs = await db.internships.find({
            "is_active": True,
            "$or": [
                {"application_deadline": {"$gt": datetime.utcnow()}},
                {"application_deadline": None}
            ]
        }).to_list(length=100)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏á‡∏≤‡∏ô
        job_scores = []
        for job in active_jobs:
            score = await calculate_student_match_score(job, current_user, db)
            if score >= min_score:
                job_data = transform_internship_data(job)
                job_data["ai_match_score"] = score
                
                if include_reason:
                    job_data["recommendation_reason"] = await get_recommendation_reason(job, current_user, db)
                
                job_scores.append((score, job_data))
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        job_scores.sort(key=lambda x: x[0], reverse=True)
        
        return [job_data for _, job_data in job_scores[:limit]]
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error generating recommendations: {str(e)}")

@router.post("/{job_id}/analyze-fit")
async def analyze_internship_fit(
    job_id: str,
    current_user=Depends(require_role(["student"])),
    db=Depends(get_database)
):
    """üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô"""
    
    try:
        if not ObjectId.is_valid(job_id):
            raise HTTPException(status_code=400, detail="Invalid job ID format")
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô
        job = await db.internships.find_one({"_id": ObjectId(job_id), "is_active": True})
        if not job:
            raise HTTPException(status_code=404, detail="Internship not found")
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        analysis = await detailed_fit_analysis(job, current_user, db)
        
        return analysis
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error analyzing fit: {str(e)}")

# =============================================================================
# üìä ANALYTICS & STATISTICS
# =============================================================================

@router.get("/statistics/overview")
async def get_internship_statistics(
    current_user=Depends(require_role(["hr", "admin"])),
    db=Depends(get_database)
):
    """üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô"""
    
    try:
        # Filter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HR
        company_filter = {}
        if current_user["role"] != "admin":
            company = await db.companies.find_one({"hr_users": current_user["id"]})
            if company:
                company_filter = {"company_id": str(company["_id"])}
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        total_internships = await db.internships.count_documents(company_filter)
        active_internships = await db.internships.count_documents({**company_filter, "is_active": True})
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£
        total_applications = await db.applications.count_documents({
            "job_id": {"$in": [str(job["_id"]) for job in await db.internships.find(company_filter, {"_id": 1}).to_list(None)]}
        })
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        type_stats = {}
        for intern_type in InternshipType:
            count = await db.internships.count_documents({
                **company_filter,
                "internship_type": intern_type.value,
                "is_active": True
            })
            type_stats[intern_type.value] = count
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏Å
        dept_stats = {}
        for dept in Department:
            count = await db.internships.count_documents({
                **company_filter,
                "department": dept.value,
                "is_active": True
            })
            if count > 0:
                dept_stats[dept.value] = count
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ñ‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô
        compensation_stats = {}
        for comp_type in CompensationType:
            count = await db.internships.count_documents({
                **company_filter,
                "compensation_type": comp_type.value,
                "is_active": True
            })
            if count > 0:
                compensation_stats[comp_type.value] = count
        
        return {
            "total_internships": total_internships,
            "active_internships": active_internships,
            "total_applications": total_applications,
            "avg_applications_per_job": total_applications / max(total_internships, 1),
            "by_type": type_stats,
            "by_department": dept_stats,
            "by_compensation": compensation_stats,
            "generated_at": datetime.utcnow().isoformat(),
            "scope": "company" if current_user["role"] != "admin" else "system"
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error generating statistics: {str(e)}")

# =============================================================================
# üõ†Ô∏è HELPER FUNCTIONS
# =============================================================================

def transform_internship_data(job: dict) -> dict:
    """‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å MongoDB"""
    
    job["id"] = str(job["_id"])
    
    # Set defaults
    job.setdefault("positions_filled", 0)
    job.setdefault("applications_count", 0)
    job.setdefault("qualified_applications", 0)
    job.setdefault("views_count", 0)
    job.setdefault("saves_count", 0)
    job.setdefault("welfare_others", [])
    job.setdefault("nearby_stations", [])
    
    # Convert dates
    for field in ["created_at", "updated_at", "application_deadline"]:
        if field in job and hasattr(job[field], "isoformat"):
            job[field] = job[field].isoformat()
    
    for date_field in ["start_date", "end_date"]:
        if date_field in job and hasattr(job[date_field], "isoformat"):
            job[date_field] = job[date_field].date().isoformat()
    
    return job

def transform_application_data(app: dict) -> dict:
    """‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• application ‡∏à‡∏≤‡∏Å MongoDB"""
    
    app["id"] = str(app["_id"])
    
    # Set defaults
    app.setdefault("gpa_percentile", None)
    app.setdefault("additional_documents", [])
    
    # Convert dates
    for field in ["submitted_at", "last_updated", "decision_date"]:
        if field in app and hasattr(app[field], "isoformat"):
            app[field] = app[field].isoformat()
    
    for date_field in ["available_start_date", "interview_date"]:
        if date_field in app and hasattr(app[date_field], "isoformat"):
            app[date_field] = app[date_field].date().isoformat()
    
    return app

async def calculate_student_match_score(job: dict, user: dict, db) -> float:
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ (Mock AI)"""
    
    try:
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• profile ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
        student_profile = await db.student_profiles.find_one({"user_id": user["id"]})
        if not student_profile:
            return 0.5
        
        score = 0.0
        
        # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ (25%)
        user_level = student_profile.get("education_level")
        if user_level in job.get("student_levels", []):
            score += 0.25
        
        # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤ (20%)
        user_major = student_profile.get("major", "").lower()
        job_majors = [major.lower() for major in job.get("majors", [])]
        if any(user_major in major or major in user_major for major in job_majors) or "‡∏ó‡∏∏‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤" in job_majors:
            score += 0.20
        
        # 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö GPA (15%)
        user_gpa = student_profile.get("gpa", 0)
        required_gpa = job.get("min_gpa", 0)
        if user_gpa >= required_gpa:
            score += 0.15
            # Bonus for high GPA
            if user_gpa >= 3.5:
                score += 0.05
        
        # 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡∏Å‡∏©‡∏∞ (20%)
        user_skills = student_profile.get("skills", [])
        required_skills = [skill["name"].lower() for skill in job.get("skills_required", [])]
        
        if required_skills:
            skill_matches = sum(1 for skill in user_skills if any(req_skill in skill.lower() for req_skill in required_skills))
            skill_score = min(skill_matches / len(required_skills), 1.0)
            score += skill_score * 0.20
        
        # 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏° (10%)
        # ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
        preferred_duration = student_profile.get("preferred_duration_months", 4)
        job_duration = job.get("duration_months", 4)
        if abs(preferred_duration - job_duration) <= 1:
            score += 0.05
        
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
        preferred_location = student_profile.get("preferred_location", "").lower()
        job_location = job.get("location", "").lower()
        if preferred_location in job_location or job_location in preferred_location:
            score += 0.05
        
        # 6. Bonus factors (10%)
        # ‡∏Ñ‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô
        if job.get("compensation_type") != "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô":
            score += 0.03
        
        # ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£
        welfare_count = sum([
            job.get("welfare_lunch", False),
            job.get("welfare_transport", False),
            job.get("welfare_training", False)
        ])
        score += (welfare_count / 3) * 0.03
        
        # ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á
        if job.get("provides_certificate", True):
            score += 0.02
        
        # ‡∏û‡∏µ‡πà‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á
        if job.get("mentor_assigned", True):
            score += 0.02
        
        return min(score, 1.0)
        
    except Exception:
        return 0.5

async def get_recommendation_reason(job: dict, user: dict, db) -> str:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"""
    
    try:
        reasons = []
        
        student_profile = await db.student_profiles.find_one({"user_id": user["id"]})
        if not student_profile:
            return "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"
        
        # ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤
        user_major = student_profile.get("major", "").lower()
        job_majors = [major.lower() for major in job.get("majors", [])]
        if any(user_major in major for major in job_majors):
            reasons.append("‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
        
        # ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ï‡∏≤‡∏° GPA
        user_gpa = student_profile.get("gpa", 0)
        if user_gpa >= 3.5:
            reasons.append("‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°")
        
        # ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏ó‡∏±‡∏Å‡∏©‡∏∞
        user_skills = student_profile.get("skills", [])
        required_skills = [skill["name"] for skill in job.get("skills_required", [])]
        matching_skills = [skill for skill in user_skills if any(req in skill for req in required_skills)]
        if matching_skills:
            reasons.append(f"‡∏°‡∏µ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ({', '.join(matching_skills[:2])})")
        
        # ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£
        if job.get("compensation_type") != "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô":
            reasons.append("‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô")
        
        if job.get("welfare_lunch"):
            reasons.append("‡∏°‡∏µ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ü‡∏£‡∏µ")
        
        if job.get("welfare_transport"):
            reasons.append("‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á")
        
        return " ‚Ä¢ ".join(reasons) if reasons else "‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞"
        
    except Exception:
        return "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö AI"

def check_student_eligibility(job: dict, application: StudentApplicationCreate, user: dict) -> bool:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
    if application.year_of_study.value not in job.get("student_levels", []):
        return False
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö GPA
    min_gpa = job.get("min_gpa")
    if min_gpa and application.current_gpa and application.current_gpa < min_gpa:
        return False
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤
    job_majors = [major.lower() for major in job.get("majors", [])]
    if job_majors and "‡∏ó‡∏∏‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤" not in job_majors and "all majors" not in job_majors:
        user_major = application.major.lower()
        if not any(user_major in major or major in user_major for major in job_majors):
            return False
    
    return True

def calculate_profile_completeness(application: StudentApplicationCreate) -> float:
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á Profile"""
    
    score = 0.0
    total_fields = 12
    
    # Required fields
    if application.university: score += 1
    if application.faculty: score += 1
    if application.major: score += 1
    if application.year_of_study: score += 1
    
    # Optional but important fields
    if application.current_gpa: score += 1
    if application.cover_letter: score += 1
    if application.motivation: score += 1
    if application.career_goals: score += 1
    if application.relevant_experience: score += 1
    if application.portfolio_url: score += 1
    if application.projects: score += 1
    if application.certifications: score += 1
    
    return score / total_fields

async def generate_ai_feedback(job: dict, application: StudentApplicationCreate, user: dict, db) -> str:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å AI"""
    
    feedback_parts = []
    
    # ‡∏Ç‡πâ‡∏≠‡∏î‡∏µ
    strengths = []
    if application.current_gpa and application.current_gpa >= 3.5:
        strengths.append("‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°")
    
    if application.portfolio_url:
        strengths.append("‡∏°‡∏µ Portfolio ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏á‡∏≤‡∏ô")
    
    if application.relevant_experience:
        strengths.append("‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á")
    
    if application.certifications:
        strengths.append("‡∏°‡∏µ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
    
    if strengths:
        feedback_parts.append(f"‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á: {', '.join(strengths)}")
    
    # ‡∏Ç‡πâ‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    suggestions = []
    if not application.portfolio_url:
        suggestions.append("‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ Portfolio ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏á‡∏≤‡∏ô")
    
    if not application.cover_letter or len(application.cover_letter) < 200:
        suggestions.append("‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏à‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô")
    
    if not application.projects:
        suggestions.append("‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö")
    
    if suggestions:
        feedback_parts.append(f"‡∏Ç‡πâ‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {', '.join(suggestions)}")
    
    return " | ".join(feedback_parts) if feedback_parts else "‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"

async def detailed_fit_analysis(job: dict, user: dict, db) -> dict:
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
    
    try:
        student_profile = await db.student_profiles.find_one({"user_id": user["id"]})
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°
        overall_score = await calculate_student_match_score(job, user, db)
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏î‡πâ‡∏≤‡∏ô
        analysis = {
            "overall_score": overall_score,
            "match_level": "‡∏™‡∏π‡∏á" if overall_score >= 0.8 else "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á" if overall_score >= 0.6 else "‡∏ï‡πà‡∏≥",
            
            "detailed_analysis": {
                "education_compatibility": {
                    "score": 0.8 if student_profile else 0.5,
                    "details": "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"
                },
                "skill_matching": {
                    "score": 0.7,
                    "details": "‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"
                },
                "location_convenience": {
                    "score": 0.9,
                    "details": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á"
                },
                "compensation_satisfaction": {
                    "score": 0.6,
                    "details": "‡∏Ñ‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ"
                }
            },
            
            "strengths": [
                "‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó",
                "‡∏°‡∏µ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô",
                "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏∞‡∏î‡∏ß‡∏Å"
            ],
            
            "areas_to_improve": [
                "‡∏Ñ‡∏ß‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©",
                "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏≤‡∏á"
            ],
            
            "missing_requirements": [],
            
            "recommendation": "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£" if overall_score >= 0.6 else "‡∏Ñ‡∏ß‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£",
            
            "confidence_level": "‡∏™‡∏π‡∏á" if overall_score >= 0.8 else "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á" if overall_score >= 0.6 else "‡∏ï‡πà‡∏≥",
            
            "estimated_success_rate": f"{int(overall_score * 100)}%",
            
            "next_steps": [
                "‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
                "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏à‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ",
                "‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"
            ] if overall_score >= 0.6 else [
                "‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ",
                "‡∏´‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
                "‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"
            ]
        }
        
        return analysis
        
    except Exception as e:
        return {
            "overall_score": 0.5,
            "match_level": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ",
            "error": str(e),
            "recommendation": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
        }

# =============================================================================
# üìã ADDITIONAL UTILITY ENDPOINTS
# =============================================================================

@router.get("/categories/departments")
async def get_available_departments(db=Depends(get_database)):
    """üìÇ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô"""
    
    try:
        departments = await db.internships.distinct("department", {"is_active": True})
        
        return {
            "departments": departments,
            "count": len(departments),
            "all_departments": [dept.value for dept in Department]
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching departments: {str(e)}")

@router.get("/categories/locations")
async def get_available_locations(db=Depends(get_database)):
    """üìç ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    
    try:
        locations = await db.internships.distinct("location", {"is_active": True})
        
        return {
            "locations": locations,
            "count": len(locations),
            "popular_areas": [
                "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
                "‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ",
                "‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ",
                "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£",
                "‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ",
                "‡∏£‡∏∞‡∏¢‡∏≠‡∏á"
            ]
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching locations: {str(e)}")

@router.get("/my-applications", response_model=List[ApplicationResponse])
async def get_my_applications(
    status: Optional[ApplicationStatus] = Query(None, description="‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"),
    sort_by: str = Query("submitted_at", description="‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°"),
    sort_order: str = Query("desc", regex="^(asc|desc)$"),
    current_user=Depends(require_role(["student"])),
    db=Depends(get_database)
):
    """üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô"""
    
    try:
        filter_query = {"student_id": current_user["id"]}
        
        if status:
            filter_query["status"] = status.value
        
        sort_direction = 1 if sort_order == "asc" else -1
        applications = await db.applications.find(filter_query).sort(sort_by, sort_direction).to_list(length=100)
        
        return [transform_application_data(app) for app in applications]
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching applications: {str(e)}")

@router.put("/applications/{application_id}/withdraw")
async def withdraw_application(
    application_id: str,
    reason: Optional[str] = Query(None, description="‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏ï‡∏±‡∏ß"),
    current_user=Depends(require_role(["student"])),
    db=Depends(get_database)
):
    """‚ùå ‡∏ñ‡∏≠‡∏ô‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô"""
    
    try:
        if not ObjectId.is_valid(application_id):
            raise HTTPException(status_code=400, detail="Invalid application ID format")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£
        application = await db.applications.find_one({
            "_id": ObjectId(application_id),
            "student_id": current_user["id"]
        })
        
        if not application:
            raise HTTPException(status_code=404, detail="Application not found")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡πâ‡∏ß)
        if application["status"] in [ApplicationStatus.ACCEPTED.value, ApplicationStatus.REJECTED.value]:
            raise HTTPException(status_code=400, detail="Cannot withdraw this application")
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        await db.applications.update_one(
            {"_id": ObjectId(application_id)},
            {"$set": {
                "status": ApplicationStatus.WITHDRAWN.value,
                "withdrawal_reason": reason,
                "last_updated": datetime.utcnow()
            }}
        )
        
        # ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏ô‡∏á‡∏≤‡∏ô
        await db.internships.update_one(
            {"_id": ObjectId(application["job_id"])},
            {"$inc": {"applications_count": -1}}
        )
        
        return {"message": "Application withdrawn successfully"}
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error withdrawing application: {str(e)}")

@router.post("/{job_id}/save")
async def save_internship(
    job_id: str,
    current_user=Depends(require_role(["student"])),
    db=Depends(get_database)
):
    """‚≠ê ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à"""
    
    try:
        if not ObjectId.is_valid(job_id):
            raise HTTPException(status_code=400, detail="Invalid job ID format")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô
        job = await db.internships.find_one({"_id": ObjectId(job_id), "is_active": True})
        if not job:
            raise HTTPException(status_code=404, detail="Internship not found")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        existing_save = await db.saved_jobs.find_one({
            "job_id": job_id,
            "user_id": current_user["id"]
        })
        
        if existing_save:
            raise HTTPException(status_code=400, detail="Job already saved")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏≤‡∏ô
        await db.saved_jobs.insert_one({
            "job_id": job_id,
            "user_id": current_user["id"],
            "saved_at": datetime.utcnow()
        })
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô saves
        await db.internships.update_one(
            {"_id": ObjectId(job_id)},
            {"$inc": {"saves_count": 1}}
        )
        
        return {"message": "Internship saved successfully"}
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error saving internship: {str(e)}")

@router.delete("/{job_id}/unsave")
async def unsave_internship(
    job_id: str,
    current_user=Depends(require_role(["student"])),
    db=Depends(get_database)
):
    """‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏≤‡∏ô"""
    
    try:
        # ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        result = await db.saved_jobs.delete_one({
            "job_id": job_id,
            "user_id": current_user["id"]
        })
        
        if result.deleted_count == 0:
            raise HTTPException(status_code=404, detail="Saved job not found")
        
        # ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô saves
        await db.internships.update_one(
            {"_id": ObjectId(job_id)},
            {"$inc": {"saves_count": -1}}
        )
        
        return {"message": "Internship unsaved successfully"}
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error unsaving internship: {str(e)}")

@router.get("/saved", response_model=List[InternshipResponse])
async def get_saved_internships(
    current_user=Depends(require_role(["student"])),
    db=Depends(get_database)
):
    """‚≠ê ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ"""
    
    try:
        # ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
        saved_jobs = await db.saved_jobs.find({"user_id": current_user["id"]}).sort("saved_at", -1).to_list(length=100)
        
        if not saved_jobs:
            return []
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
        job_ids = [ObjectId(save["job_id"]) for save in saved_jobs]
        jobs = await db.internships.find({"_id": {"$in": job_ids}}).to_list(length=100)
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° AI score
        result_jobs = []
        for job in jobs:
            job_data = transform_internship_data(job)
            job_data["ai_match_score"] = await calculate_student_match_score(job, current_user, db)
            result_jobs.append(job_data)
        
        return result_jobs
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching saved internships: {str(e)}")

# =============================================================================
# üéì STUDENT DASHBOARD SUMMARY
# =============================================================================

@router.get("/dashboard/summary")
async def get_student_dashboard_summary(
    current_user=Depends(require_role(["student"])),
    db=Depends(get_database)
):
    """üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dashboard ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤"""
    
    try:
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£
        my_applications = await db.applications.count_documents({"student_id": current_user["id"]})
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        status_counts = {}
        for status in ApplicationStatus:
            count = await db.applications.count_documents({
                "student_id": current_user["id"],
                "status": status.value
            })
            if count > 0:
                status_counts[status.value] = count
        
        # ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
        saved_count = await db.saved_jobs.count_documents({"user_id": current_user["id"]})
        
        # ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (7 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß)
        week_ago = datetime.utcnow() - timedelta(days=7)
        new_recommendations = await db.internships.count_documents({
            "is_active": True,
            "created_at": {"$gte": week_ago},
            "$or": [
                {"application_deadline": {"$gt": datetime.utcnow()}},
                {"application_deadline": None}
            ]
        })
        
        # ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡∏ï‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ (3 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤)
        three_days_later = datetime.utcnow() + timedelta(days=3)
        expiring_soon = await db.internships.count_documents({
            "is_active": True,
            "application_deadline": {
                "$gte": datetime.utcnow(),
                "$lte": three_days_later
            }
        })
        
        # ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        recent_applications = await db.applications.find(
            {"student_id": current_user["id"]},
            {"job_title": 1, "company_name": 1, "status": 1, "submitted_at": 1}
        ).sort("submitted_at", -1).limit(5).to_list(5)
        
        return {
            "applications": {
                "total": my_applications,
                "by_status": status_counts,
                "recent": [
                    {
                        "job_title": app["job_title"],
                        "company_name": app["company_name"],
                        "status": app["status"],
                        "submitted_at": app["submitted_at"].isoformat() if hasattr(app["submitted_at"], "isoformat") else str(app["submitted_at"])
                    }
                    for app in recent_applications
                ]
            },
            "saved_jobs": saved_count,
            "opportunities": {
                "new_recommendations": new_recommendations,
                "expiring_soon": expiring_soon
            },
            "profile_completion": 85,  # Mock - ‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏£‡∏¥‡∏á‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
            "next_actions": [
                "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï Resume ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
                "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥",
                "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå"
            ],
            "generated_at": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error generating dashboard summary: {str(e)}")

# =============================================================================
# üìÑ EXPORT & REPORTING
# =============================================================================

@router.get("/export/my-applications")
async def export_my_applications(
    format: str = Query("csv", regex="^(csv|json)$", description="‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå"),
    current_user=Depends(require_role(["student"])),
    db=Depends(get_database)
):
    """üìä Export ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô"""
    
    try:
        applications = await db.applications.find({"student_id": current_user["id"]}).to_list(length=1000)
        
        if format == "csv":
            import csv
            import io
            
            output = io.StringIO()
            writer = csv.writer(output)
            
            # Header
            writer.writerow([
                "Application Code", "Job Title", "Company", "Status",
                "Submitted Date", "Last Updated", "AI Score", "HR Rating"
            ])
            
            # Data
            for app in applications:
                writer.writerow([
                    app.get("application_code", ""),
                    app.get("job_title", ""),
                    app.get("company_name", ""),
                    app.get("status", ""),
                    app.get("submitted_at", "").strftime("%Y-%m-%d") if app.get("submitted_at") else "",
                    app.get("last_updated", "").strftime("%Y-%m-%d") if app.get("last_updated") else "",
                    app.get("ai_matching_score", ""),
                    app.get("hr_rating", "")
                ])
            
            from fastapi.responses import StreamingResponse
            output.seek(0)
            return StreamingResponse(
                io.BytesIO(output.getvalue().encode()),
                media_type="text/csv",
                headers={"Content-Disposition": "attachment; filename=my_applications.csv"}
            )
        
        else:  # JSON format
            from fastapi.responses import JSONResponse
            return JSONResponse(
                content={
                    "applications": [transform_application_data(app) for app in applications],
                    "exported_at": datetime.utcnow().isoformat(),
                    "total_count": len(applications)
                }
            )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error exporting applications: {str(e)}")

# =============================================================================
# üîö END OF FILE
# =============================================================================

# TODO: ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡πà‡∏≠
"""
1. ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏à‡∏£‡∏¥‡∏á:
   - PDF text extraction
   - NLP skill identification  
   - Advanced matching algorithms
   - LLM integration

2. ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:
   - Email notifications
   - Line notifications
   - In-app notifications

3. ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô:
   - HR analytics dashboard
   - Student progress tracking
   - University partnership reports

4. ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô:
   - Performance evaluation
   - Feedback system
   - Rating system

5. Advanced Features:
   - Video interview integration
   - Calendar scheduling
   - Document verification
   - Background checks
"""